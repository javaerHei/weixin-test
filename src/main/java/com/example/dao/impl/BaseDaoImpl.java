package com.example.dao.impl;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.SQLException;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.PreparedStatementCreator;
import org.springframework.jdbc.support.GeneratedKeyHolder;
import org.springframework.jdbc.support.KeyHolder;

public class BaseDaoImpl {
	
	@Autowired
	protected JdbcTemplate jdbcTemplate;
	private Logger logger = LoggerFactory.getLogger(this.getClass());

	/**
	 * insert a row with auto increament id
	 * 
	 * @param sql
	 * @param params
	 * @param autoGeneratedColumnName
	 * @return
	 * @throws DataAccessException
	 */
	public long insert(String sql, Object[] params, String autoGeneratedColumnName) throws DataAccessException {

		ReturnIdPreparedStatementCreator psc = new ReturnIdPreparedStatementCreator(sql, params,
				autoGeneratedColumnName);
		KeyHolder keyHolder = new GeneratedKeyHolder();
		try {
			jdbcTemplate.update(psc, keyHolder);
		} catch (DataAccessException e) {
			StringBuilder sb = new StringBuilder();
			sb.append("[");
			for (Object p : params) {
				sb.append(p + " | ");
			}
			sb.append("]");
			logger.error("Error SQL: " + sql + " Params: " + sb.toString());
			throw e;
		}

		return keyHolder.getKey().longValue();
	}

	
	public class ReturnIdPreparedStatementCreator implements PreparedStatementCreator {

		private String sql;
		private Object[] params;
		private String autoGeneratedColumnName;

		public ReturnIdPreparedStatementCreator(String sql, Object[] params, String autoGeneratedColumnName) {
			this.sql = sql;
			this.params = params;
			this.autoGeneratedColumnName = autoGeneratedColumnName;
		}

		@Override
		public PreparedStatement createPreparedStatement(Connection connection) throws SQLException {
			PreparedStatement ps = connection.prepareStatement(sql, new String[] { autoGeneratedColumnName });
			for (int i = 0; i < params.length; i++) {
				Object value = params[i];
				ps.setObject((i + 1), value);
			}
			return ps;
		}

	}
}
